// game.js

let difficulty = null; // –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
let gameDuration = 0; // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
let orderInterval = 0; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
let gameEndTimeout = null; // –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
let orderIntervalID = null; // ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
let gameTimerID = null; // ID —Ç–∞–π–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞

const userNames = ["–ê–ª–µ–∫—Å–µ–π", "–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω", "–û–ª—å–≥–∞", "–î–º–∏—Ç—Ä–∏–π", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ú–∞–∫—Å–∏–º", "–Æ–ª–∏—è", "–ê—Ä—Ç—É—Ä", "–ù–∞—Ç–∞–ª—å—è"];

const game = {
    timer: 0,
    score: 0,
    queue: [], // –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–º–∞–∫—Å. 5)
    pendingOrders: [], // –û—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤
    currentOrder: null,
    recipes: {
        "Latte": { coffee: 50, milk: 150, syrup: 10 },
        "Espresso": { coffee: 100 },
        "Cappuccino": { coffee: 50, milk: 100 }
    }
};


// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function startGame(selectedDifficulty) {
    difficulty = selectedDifficulty;
    const settings = {
        easy: { orderInterval: 25000, gameDuration: 180 },
        medium: { orderInterval: 5000, gameDuration: 120 }
    };
    const { orderInterval, gameDuration } = settings[difficulty];

    document.getElementById("difficulty").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
    showNotification(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${difficulty === "easy" ? "–õ—ë–≥–∫–∏–π" : "–°—Ä–µ–¥–Ω–∏–π"}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for (let i = 0; i < 1; i++) { // –î–æ–±–∞–≤–∏–º 3 –∑–∞–∫–∞–∑–∞ —Å—Ä–∞–∑—É
        addClient();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    orderIntervalID = setInterval(addClient, orderInterval);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameTimerID = setInterval(gameLoop, 1000);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    gameEndTimeout = setTimeout(endGame, gameDuration * 1000);
}


// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function endGame() {
    clearInterval(orderIntervalID); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    clearInterval(gameTimerID); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    clearTimeout(gameEndTimeout); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    document.getElementById("result").style.display = "block";
    document.getElementById("result").textContent = `–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç: ${game.score} –æ—á–∫–æ–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!`;
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
function addClient() {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const randomUser = userNames[Math.floor(Math.random() * userNames.length)];

    const orders = Object.keys(game.recipes);
    const randomOrder = orders[Math.floor(Math.random() * orders.length)];
    const client = {
        id: Date.now(),
        name: randomUser,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –≤–º–µ—Å—Ç–æ –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ
        order: randomOrder,
        patience: 100 // –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è
    };

    if (game.queue.length < 3) {
        game.queue.push(client); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    } else {
        game.pendingOrders.push(client); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
    }

    renderQueue();
    renderPendingOrders();
}


// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
function renderQueue() {
    const queueDiv = document.getElementById("queue");
    queueDiv.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å

    game.queue.forEach(client => {
        const clientButton = document.createElement("button");
        clientButton.textContent = `üë§ ${client.name}  (${client.patience}%)`;  // –í—ã–≤–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        if (game.currentOrder && game.currentOrder.id === client.id) {
            clientButton.style.backgroundColor = "red";  // –ö—Ä–∞—Å–∏–º –∫–Ω–æ–ø–∫—É –≤ –∫—Ä–∞—Å–Ω—ã–π, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–µ–Ω
        } else {
            clientButton.style.backgroundColor = "";  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
        }

        clientButton.onclick = () => startOrder(client);  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
        queueDiv.appendChild(clientButton);
    });
}


function shiftPendingToQueue() {
    if (game.queue.length < 3 && game.pendingOrders.length > 0) {
        const nextOrder = game.pendingOrders.shift();
        game.queue.push(nextOrder);
        renderQueue();
        renderPendingOrders();
    }
}

function startOrder(client) {
    if (game.currentOrder) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll("button").forEach(button => button.style.backgroundColor = "");
    }

    game.currentOrder = client;
    renderQueue();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞

    const recipe = game.recipes[client.order];

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const ingredientsList = Object.entries(recipe)
        .map(([ingredient, amount]) => `${ingredient}: ${amount} –º–ª`)
        .join(", ");

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑ –∏ –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    const orderDetailsDiv = document.getElementById("order-details");
    orderDetailsDiv.innerHTML = `
        <p>–ö–ª–∏–µ–Ω—Ç: ${client.name}</p>
        <p>–ó–∞–∫–∞–∑: ${client.order}</p>
        <p>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${ingredientsList}</p>
    `;
}


function isOrderValid(recipe, selectedIngredients) {
    return Object.entries(recipe).every(([ingredient, requiredAmount]) => {
        const totalAmount = selectedIngredients
            .filter(item => item.name === ingredient)
            .reduce((sum, item) => sum + parseInt(item.quantity), 0);
        return totalAmount === requiredAmount;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—à–∫–∏
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—à–∫–∏
function renderOrder() {
    const cupContents = document.getElementById('cup');

    if (selectedIngredients.length === 0) {
        cupContents.innerHTML = '<p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</p>';
    } else {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        const ingredientsText = selectedIngredients
            .map(item => `${item.name} - ${item.quantity}`)  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            .join(' ');  // –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

        cupContents.innerHTML = ingredientsText;  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—à–∫–µ
    }
}

// –í—ã–∑—ã–≤–∞—Ç—å renderOrder –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
document.getElementById('complete-order').addEventListener('click', () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if (game.currentOrder) {
        renderOrder();
    }
});


// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function checkOrder() {
    const currentRecipe = game.recipes[game.currentOrder.order];
    const recipeKeys = Object.keys(currentRecipe);
    const isCorrect = recipeKeys.every(key => {
        const requiredAmount = currentRecipe[key];
        const totalAmount = selectedIngredients
            .filter(ingredient => ingredient.name === key)
            .reduce((sum, ingredient) => sum + parseInt(ingredient.quantity), 0);

        return totalAmount === requiredAmount;
    });

    if (isCorrect) {
        showNotification('–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        game.score += 10;
        game.queue.shift(); // –£–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        selectedIngredients.length = 0; // –û—á–∏—â–∞–µ–º —á–∞—à–∫—É
        renderQueue();
        renderOrder();
    } else {
        showNotification('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç.');
    }
}


function gameLoop() {
    game.timer++;
    document.getElementById("timer").textContent = `‚è≥ –í—Ä–µ–º—è: ${Math.floor(game.timer / 60)}:${game.timer % 60}`;
    document.getElementById("score").textContent = `‚≠ê –û—á–∫–∏: ${game.score}`;

    // –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ—Ä–ø–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    game.queue.forEach((client, index) => {
        client.patience -= 3;
        if (client.patience <= 0) {
            showNotification(`–ì–æ—Å—Ç—å ${client.name} —É—à–µ–ª –±–µ–∑ –∑–∞–∫–∞–∑–∞!`);
            if (game.currentOrder && game.currentOrder.id === client.id) {
                game.currentOrder = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
            }
            game.queue.splice(index, 1); // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const penalty = 10;
            game.score = Math.max(game.score - penalty, 0);
        }
    });

    shiftPendingToQueue(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
    renderQueue();
}

function renderPendingOrders() {
    const pendingDiv = document.getElementById("pending-orders");
    pendingDiv.innerHTML = `<p>–ó–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥–∏: ${game.pendingOrders.length}</p>`;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
const selectedIngredients = [];
const ingredients = document.querySelectorAll('.ingredient');
const cup = document.getElementById('cup');
const quantityInputs = document.querySelectorAll('.quantity');
const quantityDisplays = document.querySelectorAll('.quantity-display');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞
quantityInputs.forEach((input, index) => {
    input.addEventListener('input', () => {
        const value = input.value;
        quantityDisplays[index].textContent = `${value} –º–ª`;
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
document.getElementById('complete-order').addEventListener('click', () => {
    if (!game.currentOrder) {
        showNotification("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!");
        return;
    }

    const recipe = game.recipes[game.currentOrder.order];
    if (isOrderValid(recipe, selectedIngredients)) {
        showNotification(`–ó–∞–∫–∞–∑ "${game.currentOrder.order}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
        game.score += 10;
        // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
        const clientIndex = game.queue.findIndex(client => client.id === game.currentOrder.id);
        if (clientIndex !== -1) {
            game.queue.splice(clientIndex, 1); // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        }
        resetOrder();
    } else {
        showNotification(`–û—à–∏–±–∫–∞ –≤ –∑–∞–∫–∞–∑–µ "${game.currentOrder.order}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.`);
    }
});

const ingredientSelect = document.getElementById('ingredient-select');
const quantitySlider = document.getElementById('quantity-slider');
const quantityDisplay = document.getElementById('quantity-display');

ingredientSelect.addEventListener('change', (event) => {
    const selectedOption = event.target.options[event.target.selectedIndex];
    quantitySlider.min = selectedOption.dataset.min;
    quantitySlider.max = selectedOption.dataset.max;
    quantitySlider.step = selectedOption.dataset.step;
    quantitySlider.value = selectedOption.dataset.min;
    quantityDisplay.textContent = `${quantitySlider.value} –º–ª`;
});

quantitySlider.addEventListener('input', () => {
    quantityDisplay.textContent = `${quantitySlider.value} –º–ª`;
});

const ingredientText = document.getElementById('drag-ingredient');

ingredientSelect.addEventListener('change', () => {
    updateDragIngredientText();
});

quantitySlider.addEventListener('input', () => {
    updateDragIngredientText();
});

function updateDragIngredientText() {
    const ingredientName = ingredientSelect.value;
    const quantity = quantitySlider.value;
    ingredientText.textContent = `${ingredientName} - ${quantity} –º–ª`;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
document.getElementById("easy").addEventListener("click", () => startGame("easy"));
document.getElementById("medium").addEventListener("click", () => startGame("medium"));

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
gameLoop();
renderQueue();